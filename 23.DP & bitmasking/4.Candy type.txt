Ghost Type
Send Feedback
Gengar has got an integer N. Now using his ghostly powers, he can create the permutation from 1 to N of this given number.
Since, he's a special kind of Poke'mon, so he thinks he deserves special permutations. He wants to find the total number of special permutations of length N, consisting of the integers from 1 to N
.

A permutation is called special if it satisfies following condition:
If Ap & Aq == Ap, then p < q, where p and q are two distinct indices of permutation and A is the permutation itself. "&" denotes the bitwise and operation.
Help Gengar in finding the number of such permutations.
Input format:
The only line of input will consist of a single integer N denoting the length of the permutation.
Output format:
Output the total number of special permutations of length N
.

Constraints:
1 = N = 20

SAMPLE INPUT
4

SAMPLE OUTPUT
8

Explanation
All the special permutations of length 4 are: 1 2 3 4

1 2 4 3

1 4 2 3

2 1 3 4

2 1 4 3

2 4 1 3

4 1 2 3

4 2 1 3
Solution:
class Main{
    static long ans(int n){
        long dp[] = new long[(1<<n)];
        dp[0] = 1;
        for(int mask = 1; mask < (1<<n); mask++) {
            dp[mask] = 0;
        }
        for(int mask = 0; mask < (1<<n)-1; mask++){
            for(long i = 0; i < n; i++){
                if((mask&(1<<i))==0){
                    long x = 1+i;
                     boolean flag = true;
                    for(long j = 0; j < n; j++){
                        if((mask&(1<<j))==1){
                            long y = j+1;
                            if((x&y) == x){
                                flag = false;
                                break;
                            }
                        }
                    }
                    if(flag){
                        dp[mask|(1<<i)] += dp[mask];
                    }
                }
            }
        }
        return dp[(1<<n)-1] ;
    }
    static int minCost(int n){
        int dp[]=new int[1<<n];
        dp[0]=1;
        for(int mask=0;mask<(1<<n)-1;mask++) {
            for (int i = 0; i < n; i++) {
                if ((mask & (1 << i)) == 0) {
                    int x = 1 + i;
                    boolean flag=true;

                    for(int j=0;j<n;j++){
                        if((mask&(1<<j))==1){
                            int y=j+1;
                            if((x&y)==x){
                                flag= false;
                                break;
                            }
                        }
                    }

                    if(flag){
                        dp[mask|(1<<i)]+=dp[mask];
                    }
                }
            }
        }
        return  dp[(1<<n)-1];
    }
    public static void main(String args[]){
        System.out.println(ans(4));
        System.out.println(minCost(4));
    }
}



c++
#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef unordered_map<ll, int> umapii;
typedef unordered_map<int, bool> umapib;
typedef unordered_map<string, int> umapsi;
typedef unordered_map<string, string> umapss;
typedef map<string, int> mapsi;
typedef map<pair<int, int>, int> mappiii;
typedef map<int, int> mapii;
typedef pair<int, int> pii;

#define it iterator
#define mp make_pair
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define MOD 1000000007

int main(){
    ll n;
    cin >> n;
    bool flag;

    if(n == 1){
        cout << 1 << endl;
        return 0;
    }

    ll *dp = new ll[(1<<n)];
    dp[0] = 1;

    for(ll mask = 1; mask < (1<<n); mask++) dp[mask] = 0;

    for(ll mask = 0; mask < (1<<n)-1; mask++){
        for(ll i = 0; i < n; i++){
            if(!(mask&(1<<i))){
                ll x = 1+i;
                flag = true;

                for(ll j = 0; j < n; j++){
                    if(mask&(1<<j)){
                        ll y = j+1;
                        if((x&y) == x){
                            flag = false;
                            break;
                        }
                    }
                }

                if(flag){
                    dp[mask|(1<<i)] += dp[mask];
                }
            }
        }
    }

    cout << dp[(1<<n)-1] << endl;
}

import java.util.Arrays;

class Main{

    static int minCost(int cost[][],int n,int p,int mask,int dp[]){
        if(p>=n){
            return 0;
        }
        if(dp[mask]!=Integer.MAX_VALUE){
            return dp[mask];
        }
        int mim=Integer.MAX_VALUE;
        for(int i=0;i<n;i++){
            if((mask&(1<<i))==0){
                 int ans=minCost(cost,n,p+1,mask|(1<<i),dp)+cost[p][i];
                 if(ans<mim){
                     mim=ans;
                 }
            }
        }
        return  dp[mask]=mim;
    }

    static int minCost1(int cost[][],int n){
        int dp[]=new int[1<<n];
        Arrays.fill(dp,Integer.MAX_VALUE);
        dp[0]=0;
        for(int mask=0;mask<(1<<n)-1;mask++){
            int temp=mask;
            int count=0;
            while (temp>0){
                if(temp%2==1){
                    count++;
                }
                temp=temp/2;
            }

            for(int i=0;i<n;i++){
                if(((mask&(1<<i))==0)){
                    dp[mask|(1<<i)]=Math.min(cost[count][i]+dp[mask],dp[mask|(1<<i)]);
                }
            }
        }
        return dp[(1<<n)-1];
    }
    public static void main(String args[]){
        int cosst[][]={{10,2,6,5},{1,15,12,8},{7,8,9,3},{15,13,4,10}};
        int dp[]=new int[1<<4];
        Arrays.fill(dp,Integer.MAX_VALUE);
        System.out.println(minCost(cosst,4,0,0,dp));
        System.out.println(minCost1(cosst,4));

    }
}
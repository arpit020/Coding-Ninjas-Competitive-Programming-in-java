Code : BFS Traversal
Send Feedback
Given an undirected and connected graph G(V, E), print its BFS traversal.
Here you need to consider that you need to print BFS path starting from vertex 0 only.
V is the number of vertices present in graph G and vertices are numbered from 0 to V-1.
E is the number of edges present in graph G.
Note : 1. Take graph input in the adjacency matrix.
2. Handle for Disconnected Graphs as well
Input Format :
Line 1: Two Integers V and E (separated by space)
Next 'E' lines, each have two space-separated integers, 'a' and 'b', denoting that there exists an edge between Vertex 'a' and Vertex 'b'.
Output Format :
BFS Traversal (separated by space)
Constraints :
2 <= V <= 1000
1 <= E <= 1000
Sample Input 1:
4 4
0 1
0 3
1 2
2 3
Sample Output 1:
0 1 3 2
Solution:
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
//disconnected graph
public class Solution{


    static void BFS(int graph[][],int n,boolean visited[],int starting){
        Queue<Integer> queue=new LinkedList<>();
        queue.add(starting);
        visited[starting]=true;
        while (!queue.isEmpty()){
            int a=queue.poll();
            for(int i=0;i<n;i++){
                if(graph[a][i]==1 && visited[i]==false){
                    queue.add(i);
                    visited[i]=true;
                }
            }
            System.out.print(a+" ");
        }
        }
        
        
        static  public void printBFS(int arr[][],int n){
            boolean visited[] = new boolean[n];
            for(int i=0;i<n;i++){
                if(visited[i]==false){
                    BFS(arr,n,visited,i);
                }
            }
        }

    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int vertices = sc.nextInt();
        int graph[][] = new int[vertices][vertices];
   
        int edges = sc.nextInt();
        for (int i = 0; i < edges; i++) {
            int x1 = sc.nextInt();
            int x2 = sc.nextInt();
            graph[x1][x2] = 1;
            graph[x2][x1] = 1;
        }
        printBFS(graph, vertices);
    }
}
Code : Has Path
Send Feedback
Given an undirected graph G(V, E) and two vertices v1 and v2(as integers), check if there exists any path between them or not. Print true or false.
V is the number of vertices present in graph G and vertices are numbered from 0 to V-1.
E is the number of edges present in graph G.
Input Format :
Line 1: Two Integers V and E (separated by space)
Next E lines : Two integers a and b, denoting that there exists an edge between vertex a and vertex b (separated by space)
Line (E+2) : Two integers v1 and v2 (separated by space)
Output Format :
true or false
Constraints :
2 <= V <= 1000
1 <= E <= 1000
0 <= v1, v2 <= V-1
Sample Input 1 :
4 4
0 1
0 3
1 2
2 3
1 3
Sample Output 1 :
true
Sample Input 2 :
6 3
5 3
0 1
3 4
0 3
Sample Output 2 :
false
Solution:
import java.util.Scanner;
public class Solution {
    static boolean DFS(int graph[][],int n,int starting,int find,boolean visited[]){
        if(starting ==find ){
            return true;
        }
        visited[starting]=true;
        for(int i=0;i<n;i++){
              if(graph[starting][i]==1 && visited[i]==false){
                if(DFS(graph,n,i,find,visited)){
                    return true;
                }  
            }
        }
        return false;
    }
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int vertices=sc.nextInt();
        int graph[][]=new int[vertices][vertices];
        boolean visited[]=new boolean[vertices];
        int edges=sc.nextInt();
        for(int i=0;i<edges;i++){
            int x1=sc.nextInt();
            int x2=sc.nextInt();
            graph[x1][x2]=1;
            graph[x2][x1]=1;
        }
        int start=sc.nextInt();
        int end=sc.nextInt();
        System.out.println(DFS(graph,vertices,start,end,visited));
    }
}
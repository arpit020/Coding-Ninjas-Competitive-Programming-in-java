Coding Ninjas
Send Feedback
Given a NxM matrix containing Uppercase English Alphabets only. Your task is to tell if there is a path in the given matrix which makes the sentence “CODINGNINJA” .
There is a path from any cell to all its neighbouring cells. A neighbour may share an edge or a corner.
Input Format :
Line 1 : Two space separated integers N  and M, where N is number of rows and M is number of columns in the matrix.
Next N lines : N rows of the matrix. First line of these N line will contain 0th row of matrix, second line will contain 1st row and so on
Assume input to be 0-indexed based
Output Format :
Return 1 if there is a path which makes the sentence “CODINGNINJA” else return 0.
Constraints :
1 <= N <= 100
1 <= M <= 100
Sample Input :
2 11
CXDXNXNXNXA
XOXIXGXIXJX
Sample Output :
1
Solution:

public class solution {
    static String s="CODINGNINJA";
	
	int solve(String[] Graph , int N, int M)
	{
		char[][] graph=new char[N][M];
        for(int i=0;i<Graph.length;i++){
            graph[i]=Graph[i].toCharArray();
        }
        for(int i=0;i<N;i++){
            for(int j=0;j<M;j++){
                if(graph[i][j]=='C'){
                    boolean[][] visited=new boolean[N][M];
                    boolean kk=function(graph,visited,i,j,1);
                    if(kk){
                        return 1;
                    }
                }
            }
        }
        return 0;

	}
    static boolean function(char[][] graph,boolean visited[][],int row,int col,int index){
        if(index==s.length()){
            return true;
        }
        int rr=graph.length;
        int c=graph[0].length;
        visited[row][col]=true;
        if((row-1)>=0 && (col-1)>=0 && !visited[row-1][col-1] && graph[row-1][col-1]==s.charAt(index)){
            boolean kk= function(graph,visited,row-1,col-1,index+1);
            if(kk){
                return true;
            }else{
                visited[row][col]=false;
            }
        }
        if((row-1)>=0  && !visited[row-1][col] && graph[row-1][col]==s.charAt(index)){
            boolean kk= function(graph,visited,row-1,col,index+1);
            if(kk){
                return true;
            }else{
                visited[row][col]=false;
            }
        }
        if( (col-1)>=0 && !visited[row][col-1] && graph[row][col-1]==s.charAt(index)){
            boolean kk= function(graph,visited,row,col-1,index+1);
            if(kk){
                return true;
            }else{
                visited[row][col]=false;
            }
        }
        if((row-1)>=0 && (col+1)<c && !visited[row-1][col+1] && graph[row-1][col+1]==s.charAt(index)){
            boolean kk= function(graph,visited,row-1,col+1,index+1);
            if(kk){
                return true;
            }else{
                visited[row][col]=false;
            }
        }
        if((col+1)<c && !visited[row][col+1] && graph[row][col+1]==s.charAt(index)){
            boolean kk= function(graph,visited,row,col+1,index+1);
            if(kk){
                return true;
            }else{
                visited[row][col]=false;
            }
        }
        if((row+1)<rr && (col+1)<c && !visited[row+1][col+1] && graph[row+1][col+1]==s.charAt(index)){
            boolean kk= function(graph,visited,row+1,col+1,index+1);
            if(kk){
                return true;
            }else{
                visited[row][col]=false;
            }
        }
        if((row+1)<rr && !visited[row+1][col] && graph[row+1][col]==s.charAt(index)){
            boolean kk= function(graph,visited,row+1,col,index+1);
            if(kk){
                return true;
            }else{
                visited[row][col]=false;
            }
        }

        if((row+1)<rr && (col-1)>=0 && !visited[row+1][col-1] && graph[row+1][col-1]==s.charAt(index)){
            boolean kk= function(graph,visited,row+1,col-1,index+1);
            if(kk){
                return true;
            }else{
                visited[row][col]=false;
            }
        }
        return false;
    }
}

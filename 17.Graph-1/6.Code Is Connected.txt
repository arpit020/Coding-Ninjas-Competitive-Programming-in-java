Code : Is Connected ?
Send Feedback
Given an undirected graph G(V,E), check if the graph G is connected graph or not.
V is the number of vertices present in graph G and vertices are numbered from 0 to V-1.
E is the number of edges present in graph G.
Input Format :
Line 1: Two Integers V and E (separated by space)
Next 'E' lines, each have two space-separated integers, 'a' and 'b', denoting that there exists an edge between Vertex 'a' and Vertex 'b'.
Output Format :
"true" or "false"
Constraints :
2 <= V <= 1000
1 <= E <= 1000
Sample Input 1:
4 4
0 1
0 3
1 2
2 3
Sample Output 1:
true
Sample Input 2:
4 3
0 1
1 3 
0 3
Sample Output 2:
false 
Sample Output 2 Explanation
The graph is not connected, even though vertices 0,1 and 3 are connected to each other but there isn’t any path from vertices 0,1,3 to vertex 2. 
Solution:
import java.util.*;
public class Solution{
    static boolean[] DFS(int graph[][],int n) {
        Queue<Integer> queue = new LinkedList<>();
        queue.add(0);
        boolean[] visited=new boolean[n];
        visited[0] = true;
        while (!queue.isEmpty()) {
            int a = queue.poll();
            for (int i = 0; i < n; i++) {
                if (graph[a][i] == 1 && visited[i] == false) {
                    queue.add(i);
                    visited[i] = true;
                }
            }
        }
        return visited;
    }
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int vertices=sc.nextInt();
        int graph[][]=new int[vertices][vertices];
        int edges=sc.nextInt();
        for(int i=0;i<edges;i++){
            int x1=sc.nextInt();
            int x2=sc.nextInt();
            graph[x1][x2]=1;
            graph[x2][x1]=1;
        }
        
        boolean[] arr=DFS(graph,vertices);
        boolean aa=true;
        for (int i=0;i<arr.length;i++){
            if(arr[i]==false){
                aa=false;
                break;
            }
        }
        System.out.print(aa);
    }
}
Islands
Send Feedback
An island is a small piece of land surrounded by water . A group of islands is said to be connected if we can reach from any given island to any other island in the same group . Given N islands (numbered from 1 to N) and two lists of size M (u and v) denoting island u[i] is connected to island v[i] and vice versa . Can you count the number of connected groups of islands.
Constraints :
1<=N<=100
1<=M<=(N*(N-1))/2
1<=u[i],v[i]<=N
Input Format :
Line 1 : Two integers N and M
Line 2 : List u of size of M
Line 3 : List v of size of M
Output Return Format :
The count the number of connected groups of islands
Sample Input :
2 1
1
2
Sample Output :
1 
Solution:
import java.util.*;
class solution {

    public int solve(int n,int m,int U[],int V[]) {
        int graph[][]=new int[n][n];
        for(int i=0;i<m;i++){
            graph[U[i]-1][V[i]-1]=1;
            graph[V[i]-1][U[i]-1]=1;
        }
        return  printBFS(graph,n);
    }
     static void BFS(int graph[][],int n,boolean visited[],int starting) {
         Queue<Integer> queue = new LinkedList<>();
         queue.add(starting);
         visited[starting] = true;
         while (!queue.isEmpty()) {
             int a = queue.poll();
             for (int i = 0; i < n; i++) {
                 if (graph[a][i] == 1 && visited[i] == false) {
                     queue.add(i);
                     visited[i] = true;
                 }
             }
         }
     }
     static  int  printBFS(int arr[][],int n){
        int count=0;
         boolean visited[] = new boolean[n];
         for(int i=0;i<n;i++){
             if(visited[i]==false){
                 count++;
                 BFS(arr,n,visited,i);
             }
         }
         return count;
     }
}

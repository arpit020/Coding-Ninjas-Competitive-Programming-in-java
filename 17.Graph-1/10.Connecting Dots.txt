Connecting Dots
Send Feedback
Gary has a board of size NxM. Each cell in the board is a coloured dot. There exist only 26 colours denoted by uppercase Latin characters (i.e. A,B,...,Z). Now Gary is getting bore and wants to play a game. The key of this game is to find a cycle that contain dots of same colour. Formally, we call a sequence of dots d1,?d2,?...,?dk a cycle if and only if it meets the following condition:
1. These k dots are different: if i???j then di is different from dj.
2. k is at least 4.
3. All dots belong to the same colour.
4. For all 1?=?i?=?k?-?1: di and di?+?1 are adjacent. Also, dk and d1 should also be adjacent. Cells x and y are called adjacent if they share an edge.
Since Gary is colour blind, he wants your help. Your task is to determine if there exists a cycle on the board.
Assume input to be 0-indexed based.
Input Format :
Line 1 : Two integers N and M, the number of rows and columns of the board
Next N lines : a string consisting of M characters, expressing colors of dots in each line. Each character is an uppercase Latin letter.
Output Format :
Return 1 if there is a cycle else return 0
Constraints :
2?=?N,?M?=?50
Sample Input :
3 4
AAAA
ABCA
AAAA
Sample Output :
1
Solution:
import java.util.*;
public class solution{
    int dx[]={1,-1,0,0};
    int dy[]={0,0,1,-1};
    int[][] visited;
    int findCycle=0;
    void dfs(String[] board,int x,int y,int fromX,int fromY,char needColor,int n,int m){
        if(x<0||x>=n||y<0||y>=m) return;
        if(board[x].charAt(y)!=needColor) return;
        if(visited[x][y]==1){
            findCycle=1;
            return;
        }
        visited[x][y]=1;
        for(int f=0;f<4;f++){
            int nextX=x+dx[f];
            int nextY=y+dy[f];
            if(nextX==fromX && nextY==fromY)continue;
            dfs(board,nextX,nextY,x,y,needColor,n,m);
        }
    }
    int solve(String[] board,int n,int m){
        visited=new int[n][m];
        for(int i=0;i<n;i++){
            Arrays.fill(visited[i],0);
        }   
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(visited[i][j]==0){
                    dfs(board,i,j,-1,-1,board[i].charAt(j),n,m);
                }
            }
        }
        return findCycle;
    }
}
/*
public class solution {
	
	int solve(String[] Graph , int N, int M)
	{
		char[][] graph = new char[N][M];
        for (int i = 0; i < Graph.length; i++) {
            graph[i] = Graph[i].toCharArray();
        }
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                    char c=graph[i][j];
                    boolean[][] visited = new boolean[N][M];
                    boolean kk = function(graph, visited, i, j, 1,c);
                    if (kk) {
                        return 1;
                    }
                }
            }
        return 0;

	}	
    static boolean function(char[][] graph, boolean visited[][], int row, int col, int index,char c1) {
        if (index>=4 && check(graph, visited, row, col, c1)) {
            return true;
        }
        int rr = graph.length;
        int c = graph[0].length;
        visited[row][col] = true;
        if ((row - 1) >= 0 && (col - 1) >= 0 && !visited[row - 1][col - 1] && graph[row - 1][col - 1] ==c1) {
            boolean kk = function(graph, visited, row - 1, col - 1, index + 1,c1);
            if (kk) {
                return true;
            } else {
                visited[row][col] = false;
            }
        }
        if ((row - 1) >= 0 && !visited[row - 1][col] && graph[row - 1][col] == c1) {
            boolean kk = function(graph, visited, row - 1, col, index + 1,c1);
            if (kk) {
                return true;
            } else {
                visited[row][col] = false;
            }
        }
        if ((col - 1) >= 0 && !visited[row][col - 1] && graph[row][col - 1] == c1) {
            boolean kk = function(graph, visited, row, col - 1, index + 1,c1);
            if (kk) {
                return true;
            } else {
                visited[row][col] = false;
            }
        }
        if ((row - 1) >= 0 && (col + 1) < c && !visited[row - 1][col + 1] && graph[row - 1][col + 1] ==c1) {
            boolean kk = function(graph, visited, row - 1, col + 1, index + 1,c1);
            if (kk) {
                return true;
            } else {
                visited[row][col] = false;
            }
        }
        if ((col + 1) < c && !visited[row][col + 1] && graph[row][col + 1] == c1) {
            boolean kk = function(graph, visited, row, col + 1, index + 1,c1);
            if (kk) {
                return true;
            } else {
                visited[row][col] = false;
            }
        }
        if ((row + 1) < rr && (col + 1) < c && !visited[row + 1][col + 1] && graph[row + 1][col + 1] == c1) {
            boolean kk = function(graph, visited, row + 1, col + 1, index + 1,c1);
            if (kk) {
                return true;
            } else {
                visited[row][col] = false;
            }
        }
        if ((row + 1) < rr && !visited[row + 1][col] && graph[row + 1][col] == c1) {
            boolean kk = function(graph, visited, row + 1, col, index + 1,c1);
            if (kk) {
                return true;
            } else {
                visited[row][col] = false;
            }
        }

        if ((row + 1) < rr && (col - 1) >= 0 && !visited[row + 1][col - 1] && graph[row + 1][col - 1] == c1) {
            boolean kk = function(graph, visited, row + 1, col - 1, index + 1,c1);
            if (kk) {
                return true;
            } else {
                visited[row][col] = false;
            }
        }
        return false;
    }

    static boolean check(char[][] graph, boolean visited[][], int row, int col, char c1){
        int rr = graph.length;
        int c = graph[0].length;

        if ((row - 1) >= 0 && (col - 1) >= 0 && visited[row - 1][col - 1] && graph[row - 1][col - 1] ==c1) {
           return true;
        }
        if ((row - 1) >= 0 && visited[row - 1][col] && graph[row - 1][col] == c1) {
            return true;
        }
        if ((col - 1) >= 0 && visited[row][col - 1] && graph[row][col - 1] == c1) {
            return true;
        }
        if ((row - 1) >= 0 && (col + 1) < c && visited[row - 1][col + 1] && graph[row - 1][col + 1] ==c1) {
           return true;
        }
        if ((col + 1) < c && !visited[row][col + 1] && graph[row][col + 1] == c1) {
            return true;
        }
        if ((row + 1) < rr && (col + 1) < c && visited[row + 1][col + 1] && graph[row + 1][col + 1] == c1) {
            return true;
        }
        if ((row + 1) < rr && !visited[row + 1][col] && graph[row + 1][col] == c1) {
           return true;
        }

        if ((row + 1) < rr && (col - 1) >= 0 && visited[row + 1][col - 1] && graph[row + 1][col - 1] == c1) {
            return true;
        }
        return false;
    }
}
*/

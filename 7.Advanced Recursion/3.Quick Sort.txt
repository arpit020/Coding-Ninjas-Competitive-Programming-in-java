Quick Sort Code
Send Feedback
Sort an array A using Quick Sort.
Change in the input array itself. So no need to return or print anything.
Input format :
Line 1 : Integer n i.e. Array size
Line 2 : Array elements (separated by space)
Output format :
Array elements in increasing order (separated by space)
Constraints :
1 <= n <= 1000
Sample Input:
6 
2 6 8 5 4 3
Sample Output:
2 3 4 5 6 8

Solution:

public class Solution {
	
    public static void quickSort(int[] input) {
        /* Your class should be named Solution
         * Don't write main().
         * Don't read input, it is passed as function argument.
         * No need to print or return the output.
         * Taking input and printing output is handled automatically.
         */

        quick(input,0,input.length);
    }
    
    static void quick(int arr[],int start,int end){
        if(end-start<=1){
            return;
        }

        int pivotIndex=partition(arr,start,end);
        quick(arr,start,pivotIndex);
        quick(arr,pivotIndex+1,end);
    }
    /*

    public static void quick_sort(int[] input,int left,int right){
        if(right>left){
            int pos=partition(input,left,right);
            quick_sort(input,left,pos);
            quick_sort(input,pos+1,right);
        }
    }

    public static int partition(int[] input,int left,int right){
        int element=input[left];
        int count=left;
        for(int j=left+1;j<=right;j++){
            if(element>input[j]){
                count++;
            }
        }
        input[left]=input[count];
        input[count]=element;
       // System.out.print(count);
        int i=left,j=right;
        while(i<count ){
            if(input[i]<element){
                i++;
            }else if(input[j]>element){
                j--;
            }else{
                int temp=input[i];
                input[i]=input[j];
                input[j]=temp;
            }
        }
        return count;
    }
    */
    static int partition(int arr[],int start,int end){

        int pivot=arr[start];
        int i=start;
        int j=end;
        while(i<j){
            while (i<j && arr[--j]>=pivot);
            if(i<j){
                arr[i]=arr[j];
            }
            while(i<j && arr[++i]<=pivot);
            if(i<j){
                arr[j]=arr[i];
            }
        }

        arr[j]=pivot;
        return j;
    }
	
}
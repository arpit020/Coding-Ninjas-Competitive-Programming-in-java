Prim's Algorithm
Send Feedback
Given an undirected, connected and weighted graph G(V, E) with V number of vertices (which are numbered from 0 to V-1) and E number of edges.
Find and print the Minimum Spanning Tree (MST) using Prim's algorithm.
For printing MST follow the steps -
1. In one line, print an edge which is part of MST in the format -
v1 v2 w
where, v1 and v2 are the vertices of the edge which is included in MST and whose weight is w. And v1 <= v2 i.e. print the smaller vertex first while printing an edge.
2. Print V-1 edges in above format in different lines.
Note : Order of different edges doesn't matter.
Input Format :
Line 1: Two Integers V and E (separated by space)
Next E lines : Three integers ei, ej and wi, denoting that there exists an edge between vertex ei and vertex ej with weight wi (separated by space)
Output Format :
MST
Constraints :
2 <= V, E <= 10^5
Sample Input 1 :
4 4
0 1 3
0 3 5
1 2 1
2 3 8
Sample Output 1 :
0 1 3
1 2 1
0 3 5

Solution:
import java.util.*;
public class Solution {
    static int get_minvertex(int weight[],boolean visited[],int n){
        int minVertex=-1;
        for(int i=0;i<n;i++){
            if(!visited[i] && (minVertex==-1 || weight[minVertex]>weight[i])){
                minVertex=i;
            }
        }
        return minVertex;
    }
    static void prim(int array[][],int n){
        int parent[]=new int[n];
        int weight[]=new int[n];
        boolean visited[]=new boolean[n];
        for(int i=0;i<n;i++){
            weight[i]=Integer.MAX_VALUE;
        }
        parent[0]=-1;
        weight[0]=0;
        for(int i=0;i<n-1;i++){

            //get minVertex....vertex which is unvisited and has minimum weight
            int xx=get_minvertex(weight,visited,n);
            visited[xx]=true;

            //explore all the direction of minVertex and update them
            for(int j=0;j<n;j++){
                if(array[xx][j]!=0 && !visited[j]) {
                    if (weight[j] > array[xx][j] ) {
                        weight[j] = array[xx][j];
                        parent[j] = xx;
                    }
                }
            }
        }

        for(int i=1;i<n;i++){
            if(i<parent[i]){
                System.out.println(i+" "+parent[i]+" "+weight[i]);
            }else{
                System.out.println(parent[i]+" "+i+" "+weight[i]);
            }
        }
    }
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        int a=sc.nextInt();
        int b=sc.nextInt();
        int edge[][]=new int[a][a];
        for(int i=0;i<b;i++){
            int x1=sc.nextInt();
            int x2=sc.nextInt();
            int x3=sc.nextInt();
            edge[x1][x2]=x3;
            edge[x2][x1]=x3;
        }
        prim(edge,a);
    }
}


Dijkstra's Algorithm
Send Feedback
Given an undirected, connected and weighted graph G(V, E) with V number of vertices (which are numbered from 0 to V-1) and E number of edges.
Find and print the shortest distance from the source vertex (i.e. Vertex 0) to all other vertices (including source vertex also) using Dijkstra's Algorithm.
Print the ith vertex number and the distance from source in one line separated by space. Print different vertices in different lines.
Note : Order of vertices in output doesn't matter.
Input Format :
Line 1: Two Integers V and E (separated by space)
Next E lines : Three integers ei, ej and wi, denoting that there exists an edge between vertex ei and vertex ej with weight wi (separated by space)
Output Format :
In different lines, ith vertex number and its distance from source (separated by space)
Constraints :
2 <= V, E <= 10^5
Sample Input 1 :
4 4
0 1 3
0 3 5
1 2 1
2 3 8
Sample Output 1 :
0 0
1 3
2 4
3 5
Solution:
import java.util.Arrays;
import java.util.Scanner;
public class Solution {
    static  int get_MinVertex(int distance[],boolean visited[],int n){
        int minVertex=-1;
        for(int i=0;i<n;i++){
            if(!visited[i] && (minVertex==-1 || distance[minVertex]>distance[i])){
                minVertex=i;
            }
        }
        return minVertex;
    }
    static void dijkstra(int edge[][],int n,int source){
        int parent[]=new int[n];
        int distance[]=new int[n];
        boolean visited[]=new boolean[n];
        Arrays.fill(distance,Integer.MAX_VALUE);
        parent[source]=-1;
        distance[source]=0;
        for(int i=0;i<n-1;i++){
            int xx=get_MinVertex(distance,visited,n);
            visited[xx]=true;
            for (int j=0;j<n;j++){
                if(edge[xx][j]!=0 && !visited[j]){
                    if(distance[j]>(distance[xx]+edge[xx][j])){
                        distance[j]=distance[xx]+edge[xx][j];
                        parent[j]=xx;
                    }
                }
            }
        }
        for (int i=0;i<n;i++){
            System.out.println(i+" "+distance[i]);
        }
    }
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        int a=sc.nextInt();
        int b=sc.nextInt();
        int edge[][]=new int[a][a];
        for(int i=0;i<b;i++){
            int x1=sc.nextInt();
            int x2=sc.nextInt();
            int x3=sc.nextInt();
            edge[x1][x2]=x3;
            edge[x2][x1]=x3;
        }
        dijkstra(edge,a,0);
    }
}

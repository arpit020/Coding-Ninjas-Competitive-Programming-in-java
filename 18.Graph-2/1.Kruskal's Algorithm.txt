Kruskal's Algorithm
Send Feedback
Given an undirected, connected and weighted graph G(V, E) with V number of vertices (which are numbered from 0 to V-1) and E number of edges.
Find and print the Minimum Spanning Tree (MST) using Kruskal's algorithm.
For printing MST follow the steps -
1. In one line, print an edge which is part of MST in the format -
v1 v2 w
where, v1 and v2 are the vertices of the edge which is included in MST and whose weight is w. And v1 <= v2 i.e. print the smaller vertex first while printing an edge.
2. Print V-1 edges in above format in different lines.
Note : Order of different edges doesn't matter.
Input Format :
Line 1: Two Integers V and E (separated by space)
Next E lines : Three integers ei, ej and wi, denoting that there exists an edge between vertex ei and vertex ej with weight wi (separated by space)
Output Format :
MST
Constraints :
2 <= V, E <= 10^5
Sample Input 1 :
4 4
0 1 3
0 3 5
1 2 1
2 3 8
Sample Output 1 :
1 2 1
0 1 3
0 3 5

Solution:
import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;
public class Solution {
    static int get_parent(int parent[],int i){
        if(parent[i]==i){
            return i;
        }
        int x=parent[i];
        while (parent[x]!=x){
            x=parent[x];
        }
        return x;
    }
    static Edge[] function(Edge[] array,int a){
        Edge[] arr=new Edge[a-1];
        int[] parent=new int[a];
        for(int i=0;i<a;i++){
            parent[i]=i;
        }
        int count=0;
        for(int i=0;i<array.length;i++){
            int x1=get_parent(parent,array[i].source);
            int x2=get_parent(parent,array[i].destination);
            if(x1!=x2){
                arr[count]=new Edge(array[i].source,array[i].destination,array[i].weight);
                parent[x1]=x2;
                count++;
            }
            if(count==(a-1)){
                break;
            }
        }
        return arr;
    }
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        int a=sc.nextInt();
        int b=sc.nextInt();
        Edge array[]=new Edge[b];
        for(int i=0;i<b;i++){
            int x1=sc.nextInt();
            int x2=sc.nextInt();
            int x3=sc.nextInt();
            array[i]=new Edge(x1,x2,x3);
        }
        Arrays.sort(array,new sort());

        Edge[] output=function(array,a);
        for(int i=0;i<output.length;i++){
            int x1=output[i].source;
            int x2=output[i].destination;
            int x3=output[i].weight;
            if(x1<x2){
            System.out.println(x1+" "+x2+" "+x3);
            }else{
            System.out.println(x2+" "+x1+" "+x3); 
            }
        }
    }
}
class Edge{
    int source;
    int destination;
    int weight;

    public Edge(int source, int destination, int weight) {
        this.source = source;
        this.destination = destination;
        this.weight = weight;
    }
}

class sort implements Comparator<Edge>{
    public int compare(Edge e1,Edge e2){
        return e1.weight-e2.weight;
    }
}

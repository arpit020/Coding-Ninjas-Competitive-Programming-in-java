Minimum In SubArray
Send Feedback
Range Minimum Query
Given an array A of size N, there are two types of queries on this array.
1) q l r: In this query you need to print the minimum in the sub-array A[l:r].
2) u x y: In this query you need to update A[x]=y.
Input:
First line of the test case contains two integers, N and Q, size of array A and number of queries.
Second line contains N space separated integers, elements of A.
Next Q lines contain one of the two queries.
Output:
For each type 1 query, print the minimum element in the sub-array A[l:r].
Contraints:
1=N,Q,y=10^5
1=l,r,x=N
Sample Input :
5 5
1 5 2 4 3
q 1 5
q 1 3
q 3 5
u 3 6
q 1 5
Sample Output :
1
1
2
1
Solution:
import java.util.Scanner;

public class Main{

    static void createTree(int arr[],int tree[],int treeNode,int start,int end){
        if (start==end){
            tree[treeNode]=arr[start];
            return;
        }
        int mid=(start+end)/2;
        createTree(arr,tree,2*treeNode+1,start,mid);
        createTree(arr,tree,2*treeNode+2,mid+1,end);
        tree[treeNode]=Math.min(tree[2*treeNode+1],tree[2*treeNode+2]);
    }

    static void updateTree(int arr[],int tree[],int treeNode,int start,int end,int index,int value){
        if(start==end){
            tree[treeNode]=value;
            arr[index]=value;
            return;
        }
        int mid=(start+end)/2;
        if(index<=mid){
            updateTree(arr,tree,2*treeNode+1,start,mid,index,value);
        }else{
            updateTree(arr,tree,2*treeNode+2,mid+1,end,index,value);
        }
        tree[treeNode]=Math.min(tree[2*treeNode+1],tree[2*treeNode+2]);
    }

    static int query(int tree[],int treeNode,int start,int end,int left,int right){

        //1st case out of range
        if(end<left || start>right){
            return Integer.MAX_VALUE;
        }

        if(start>=left && end<=right){
            return tree[treeNode];
        }

        int mid=(start+end)/2;
        int x1=query(tree,2*treeNode+1,start,mid,left,right);
        int x2=query(tree,2*treeNode+2,mid+1,end,left,right);
        return Math.min(x1,x2);
    }
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        int a=sc.nextInt();
        int b=sc.nextInt();
        int array[]=new int[a];
        int tr[]=new int[4*a];
        for (int i=0;i<a;i++){
            array[i]=sc.nextInt();
        }
        createTree(array,tr,0,0,a-1);
        for (int i=0;i<b;i++){
            sc.nextLine();
            String aa=sc.next();
            int x1=sc.nextInt();
            int x2=sc.nextInt();
            if(aa.equals("q")){
                int ans= query(tr,0,0,a-1,x1-1,x2-1);
                System.out.println(ans);
            }else {
                updateTree(array,tr,0,0,a-1,x1-1,x2);
            }
        }
    }
}

class Main{
    static void buildTree(int tree[],int arr[],int start,int end,int node){
        if(start==end){
            tree[node]=arr[start];
            return;
        }
        int mid=(start+end)/2;
        buildTree(tree,arr,start,mid,2*node);
        buildTree(tree,arr,mid+1,end,2*node+1);
        tree[node]=tree[2*node]+tree[2*node+1];
    }
    static void update(int tree[],int arr[],int start,int end,int node,int indx,int value){
        if(start==end ){
            arr[indx]=value;
            tree[node]=value;
            return;
        }
        int mid=(start+end)/2;
        if(indx<=mid){
            update(tree,arr,start,mid,2*node,indx,value);
        }else {
            update(tree,arr,mid+1,end,2*node+1,indx,value);
        }
        tree[node]=tree[2*node]+tree[2*node+1];
    }

    static int query(int tree[],int start,int end,int node,int left,int right){
        //completely outside
        if(end<left || start>right){
            return 0;
        }
        // completely inside
        if(start>=left && right>=end){
            return tree[node];
        }

        //partially inside
        int mid=(start+end)/2;
        int ans1=query(tree,start,mid,2*node,left,right);
        int ans2=query(tree,mid+1,end,2*node+1,left,right);
        return ans1+ans2;
    }
    public static void main(String args[]){
        int arr[]={1,2,3,4,5};
        int tree[]=new int[10];
        buildTree(tree,arr,0,4,1);
        for(int i=1;i<10;i++){
            System.out.print(tree[i]+" ");
        }
        System.out.println();
        update(tree,arr,0,4,1,2,10);
        for(int i=1;i<10;i++){
            System.out.print(tree[i]+" ");
        }
        System.out.println();
        int x=query(tree,0,4,1,2,4);
        System.out.println(x);
    }
}
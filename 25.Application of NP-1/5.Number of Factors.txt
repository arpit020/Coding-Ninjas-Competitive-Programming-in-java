Number Of Factors
Send Feedback
A number is called n-factorful if it has exactly n distinct prime factors. Given positive integers a, b, and n, your task is to find the number of integers between a and b, inclusive, that are n-factorful. We consider 1 to be 0-factorful.
Input
Your input will consist of a single integer T followed by a newline and T test cases. Each test cases consists of a single line containing integers a, b, and n as described above.
Output
Output for each test case one line containing the number of n-factorful integers in [a, b].
Constraints
T < 10000

1 = a = b = 10^6

0 = n = 10
Sample Input
5
1 3 1
1 10 2
1 10 3
1 100 3
1 1000 0
Sample Output
2 
2
0
8
1
Solution:
import java.util.Scanner;

class Main{
    static int range=1000000;
    static int[][] function(){
        int arr[]=new int[1000001];

        arr[2]=1;
        for(int i=2*2;i<=range;i=i+2){
            arr[i]++;
        }
        for(int i=3;i<=range;i=i+2){
            if(arr[i]==0){
                for(int j=i;j<=range;j+=i){
                    arr[j]++;
                }
            }
        }
        int table[][]=new int[11][range+1];
        for(int i=1;i<=10;i++){
            for(int j=1;j<=range;j++){
                if(arr[j]==i){
                    table[i][j]=1+table[i][j-1];
                }else {
                    table[i][j]=table[i][j-1];
                }
            }
        }

        return table;
    }
    public static void main(String args[]){
        int ans[][]=function();
        Scanner sc=new Scanner(System.in);
        int a=sc.nextInt();
        for(int i=0;i<a;i++){
            int a1=sc.nextInt();
            int a2=sc.nextInt();
            int a3=sc.nextInt();
            if( a3==0 && a1==1){
                System.out.println(1);
            }else{

                System.out.println(ans[a3][a2]-ans[a3][a1-1]);
            }
        }
    }
}
Income On Nth Day
Send Feedback
Daulat Ram is an affluent business man. After demonetization, IT raid was held at his accommodation in which all his money was seized. He is very eager to gain his money back, he started investing in certain ventures and earned out of them. On the first day, his income was Rs. X, followed by Rs. Y on the second day. Daulat Ram observed his growth as a function and wanted to calculate his income on the Nth day.
The function he found out was FN = FN-1 + FN-2 + FN-1×FN-2
Given his income on day 0 and day 1, calculate his income on the Nth day (yeah Its that simple).
Input:
The first line of input consists of a single integer T denoting number of test cases.

Each of the next T lines consists of three integers F0, F1 and N respectively.
Output:
For each test case, print a single integer FN, as the output can be large, calculate the answer modulo 10^9+7.
CONSTRAINTS:
1 = T = 10^5

0 = F0, F1, N = 10^9
Sample Input :
2
0 1 2
1 2 4
Sample Output:
1
107
Explanation
In the second test case his income on day 0 is 1 and the income on day 1 is 2. We need to calculate his income on day 4.

F0=1

F1=2

F2=1 + 2 + 1×2 = 5

F3=2 + 5 + 2×5 = 17

F4=5 + 17 + 5×17 = 107
Solution:
import java.util.Map;
import java.util.Scanner;
class Main{
    static int MOD=1000000007;
    static int MOD1=1000000006;
    static long Mod_expansion(long a,long b,long c){
        if(a==0){
            return 0;
        }
        if(b==0){
            return 1;
        }
        long ans=1;
        while (b!=0){
            if((b&1)==1){
                ans=(ans*a)%c;
            }
            b=b/2;
            a=(a*a)%c;
        }
        return (ans+c)%c;
    }
    static void multiply(long A[][],long M[][]){
        A[0][0] %= 1000000006;
        A[0][1] %= 1000000006;
        A[1][0] %= 1000000006;
        A[1][1] %= 1000000006;
        M[0][0] %= 1000000006;
        M[0][1] %= 1000000006;
        M[1][0] %= 1000000006;
        M[1][1] %= 1000000006;
        long f1=(A[0][0]*M[0][0])%MOD1+(A[0][1]*M[1][0])%MOD1;
        long f2=(A[0][0]*M[0][1])%MOD1+(A[0][1]*M[1][1])%MOD1;
        long f3=(A[1][0]*M[0][0])%MOD1+(A[1][1]*M[1][0])%MOD1;
        long f4=(A[1][0]*M[0][1])%MOD1+(A[1][1]*M[1][1])%MOD1;
        A[0][0]=f1%MOD1;
        A[0][1]=f2%MOD1;
        A[1][0]=f3%MOD1;
        A[1][1]=f4%MOD1;
    }
    static void power(long A[][],long n){
        if(n==0 || n==1){
            return;
        }
        power(A,n/2);
        multiply(A,A);
        if(n%2==1){
            long M[][]={{1,1},{1,0}};
            multiply(A,M);
        }
    }
    static long fibonacci(long n){
        if(n==0){
            return 0;
        }

        long A[][]={{1,1},{1,0}};
        power(A,n-1);
        return (A[0][0]+MOD1)%MOD1;
    }
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        int a1=sc.nextInt();
        for(int i=0;i<a1;i++){
            long x1=sc.nextLong();
            long x2=sc.nextLong();
            long n=sc.nextLong();
            if(n == 0)
            {
                System.out.println(x1);
                continue;
            }
            if(n == 1)
            {
                System.out.println(x2);
                continue;
            }
            long a=x1+1;
            long b=x2+1;
            long pow1=fibonacci(n-1)%(MOD-1);
            long pow2=fibonacci(n)%(MOD-1);
            long ans1=Mod_expansion(a,pow1, MOD);
            long ans2=Mod_expansion(b,pow2,MOD);
            long ans=((ans1%MOD)*(ans2%MOD))%MOD;
            System.out.println(ans-1);
        }

    }
}
Trader Profit
Send Feedback
Mike is a stock trader and makes a profit by buying and selling stocks. He buys a stock at a lower price and sells it at a higher price to book a profit. He has come to know the stock prices of a particular stock for n upcoming days in future and wants to calculate the maximum profit by doing the right transactions (single transaction = buying + selling). Can you help him maximize his profit?
Note: A transaction starts after the previous transaction has ended. Two transactions can't overlap or run in parallel.
The stock prices are given in the form of an array A for n days.
Given the stock prices and a positive integer k, find and print the maximum profit Mike can make in at most k transactions.
Input Format
The first line of input contains an integer q denoting the number of queries.

The first line of each test case contains a positive integer k, denoting the number of transactions. 

The second line of each test case contains a positive integer n, denoting the length of the array A.

The third line of each test case contains n space-separated positive integers, denoting the prices of each day in the array A.
Constraints
1<=q<=100

0<k<10

2<=n<=30

0<=elements of array A<=1000
Output Format
For each query print the maximum profit earned by Mike on a new line. 
Sample Input
3
2
6
10 22 5 75 65 80
3
4
20 580 420 900
1
5
100 90 80 50 25
Sample Output
87
1040
0
Solution:
import java.util.Scanner;
public class Main {
    static int dp[][][];
    static int fun(int arr[],int k){
        dp=new int[arr.length+1][k+1][2];
        for(int i=0;i<=arr.length;i++){
            for(int j=0;j<=k;j++){
                for(int l=0;l<=1;l++){
                    dp[i][j][l]=-1;
                }
            }
        }  
        return function(arr,0,k,0);
    }
    static int function(int arr[],int pos,int k,int ongoing){
        if(pos>=arr.length){
            return 0;
        }
        
        if(dp[pos][k][ongoing]!=-1){
            return dp[pos][k][ongoing];
        }
        int x1=function(arr,pos+1,k,ongoing);
        int x2=0;
        if(ongoing==1){
            x2=arr[pos]+function(arr,pos+1,k-1,0);
            dp[pos][k][ongoing]= Math.max(x1,x2);
             return dp[pos][k][ongoing];
        }else{
            if(k>0){
                x2=-arr[pos]+function(arr,pos+1,k,1);
                dp[pos][k][ongoing]= Math.max(x1,x2);
                 return dp[pos][k][ongoing];
            }
        }
        dp[pos][k][ongoing]=0;
         return dp[pos][k][ongoing];
    }   
	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
        int a=sc.nextInt();
        for(int i=0;i<a;i++){
            int b=sc.nextInt();
            int c=sc.nextInt();
            int arr[]=new int[c];
            for(int j=0;j<c;j++){
                arr[j]=sc.nextInt();
            }
            System.out.println(fun(arr,b));
        }
	}
}
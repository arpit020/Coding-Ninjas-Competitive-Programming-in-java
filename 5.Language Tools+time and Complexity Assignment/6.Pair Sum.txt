Pair sum to 0
Send Feedback
Given a random integer array A of size N. Find and print the pair of elements in the array which sum to 0.
Array A can contain duplicate elements.
While printing a pair, print the smaller element first.
That is, if a valid pair is (6, -6) print "-6 6". There is no constraint that out of 5 pairs which have to be printed in 1st line. You can print pairs in any order, just be careful about the order of elements in a pair.
Input format :
Line 1 : Integer N (Array size)
Line 2 : Array elements (separated by space)
Output format :
Line 1 : Pair 1 elements (separated by space)
Line 2 : Pair 2 elements (separated by space)
Line 3 : and so on
Constraints :
0 <= N <= 10^4
Sample Input:
5
2 1 -2 2 3
Sample Output :
-2 2
-2 2

Solution:
import java.util.*;

public class Solution {
	  public static void PairSum(int[] arr, int size) {
        Arrays.sort(arr);
        int start=0;
        int end=arr.length-1;
        int sum=0;
        while (start<end){
                if(arr[start]+arr[end]<sum){
                    start++;
                }else if(arr[start]+arr[end]>sum){
                    end--;
                }else {
                    int count1=0;
                    int count2=0;
                    for(int k=start;k<=end;k++){
                        if(arr[k]==arr[start]){
                            count1++;}
                        else {
                            break;}
                    }
                    for(int k=end;k>=start;k--){
                        if(arr[k]==arr[end]){
                            count2++;
                        }else {
                            break;
                        }
                    }

                    int combinations=count1*count2;
                    if(arr[start]==arr[end]){
                        combinations=((end-start)*(end-start+1))/2;
                    }
                    for(int k=0;k<combinations;k++){
                        System.out.println(+arr[start]+" "+arr[end]);
                    }
                    start+=count1;
                    end-=count2;
                }
            }
        }
}

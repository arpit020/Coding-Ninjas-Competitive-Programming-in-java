Triplet sum
Send Feedback
Given a random integer array and a number x. Find and print the triplets of elements in the array which sum to x.
While printing a triplet, print the smallest element first.
That is, if a valid triplet is (6, 5, 10) print "5 6 10". There is no constraint that out of 5 triplets which have to be printed on 1st line. You can print triplets in any order, just be careful about the order of elements in a triplet.
Input format :
Line 1 : Integer N (Array Size)
Line 2 : Array elements (separated by space)
Line 3 : Integer x
Output format :
Line 1 : Triplet 1 elements (separated by space)
Line 2 : Triplet 3 elements (separated by space)
Line 3 : and so on
Constraints :
1 <= N <= 1000
1 <= x <= 100
Sample Input:
7
1 2 3 4 5 6 7 
12
Sample Output ;
1 4 7
1 5 6
2 3 7
2 4 6
3 4 5

Solution:
import java.util.Arrays;
public class TripletSum {	
	public static void FindTriplet(int[] arr, int x){
        Arrays.sort(arr);
        for(int i=0;i<arr.length;i++){
            int sum=x-arr[i];
            int start=i+1;
            int end=arr.length-1;
            while (start<end){
                if(arr[start]+arr[end]<sum){
                    start++;
                }else if(arr[start]+arr[end]>sum){
                    end--;
                }else {
                    int count1=0;
                    int count2=0;
                    for(int k=start;k<=end;k++){
                        if(arr[k]==arr[start]){
                            count1++;}
                        else {
                            break;}
                    }
                    for(int k=end;k>=start;k--){
                        if(arr[k]==arr[end]){
                            count2++;
                        }else {
                            break;
                        }
                    }
                    int combinations=count1*count2;
                    if(arr[start]==arr[end]){
                        combinations=((end-start)*(end-start+1))/2;
                    }
                    for(int k=0;k<combinations;k++){
                        System.out.println(arr[i]+" "+arr[start]+" "+arr[end]);
                    }
                    start+=count1;
                    end-=count2;
                }
            }
        }
	}
}
SUBXOR
Send Feedback
A straightforward question. Given an array of positive integers you have to print the number of subarrays whose XOR is less than K. Subarrays are defined as a sequence of continuous elements Ai, Ai+1, ..., Aj . XOR of a subarray is defined as Ai ^ Ai+1 ^ ... ^ Aj. Symbol ^ is Exclusive Or.
Input Format
First line contains T, the number of test cases. 
Each of the test case consists of N and K in one line, followed by N space separated integers in next line.
Output Format
For each test case, print the required answer.
Constraints:
1 = T = 5
1 = N = 10^5
1 = A[i] = 10^5
1 = K = 10^6
Sample Input
1
5 2
4 1 3 2 7   
Sample Output
3

Solution:
import java.util.Scanner;

public class Main {
    private static int NUM_BITS = 32;

    private static class MyTrieNode {
        public int leftLeafNodes;
        public int rightLeafNodes;

        public MyTrieNode[] children;

        public MyTrieNode() {
            children = new MyTrieNode[2];
        }
    }

    public int solve(int[] nums, int k) {
        MyTrieNode root = new MyTrieNode();
        insert(root, 0);
        int prefix = 0;
        int result = 0;

        for (int i = 0; i < nums.length; ++i) {
            prefix = (prefix^nums[i]);
            result += query(root, prefix, k);
            insert(root, prefix);
        }

        return result;
    }

    private void insert(MyTrieNode root, int num) {
        MyTrieNode node = root;

        for (int i = NUM_BITS-1; i >= 0; --i) {
            int index = ((num & (1<<i)) != 0)? 1 : 0;
            if (index == 0) {
                node.leftLeafNodes += 1;
            } else {
                node.rightLeafNodes += 1;
            }

            if (node.children[index] == null) {
                node.children[index] = new MyTrieNode();
            }

            node = node.children[index];
        }
    }

    public int query(MyTrieNode root, int num, int k) {
        MyTrieNode node = root;
        int result = 0;

        for (int i = NUM_BITS-1; i >= 0; --i) {
            int nBit = ((num & (1<<i)) != 0)? 1 : 0;
            int kBit = ((k & (1<<i)) != 0)? 1 : 0;

            if (nBit == 1 && kBit == 1) {
                result += node.rightLeafNodes;
                if (node.children[1-nBit] != null) {
                    node = node.children[1-nBit];
                } else {
                    break;
                }
            } else if (nBit == 0 && kBit == 1) {
                result += node.leftLeafNodes;
                if (node.children[1-nBit] != null) {
                    node = node.children[1-nBit];
                } else {
                    break;
                }
            } else if (nBit == 1 && kBit == 0) {
                if (node.children[nBit] != null) {
                    node = node.children[nBit];
                } else {
                    break;
                }
            } else { 
                if (node.children[nBit] != null) {
                    node = node.children[nBit];
                } else {
                    break;
                }
            }
        }

        return result;
    }

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int a=sc.nextInt();
        for(int i=0;i<a;i++){
            int b=sc.nextInt();
            int c=sc.nextInt();
            int arr[]=new int[b];
            for(int j=0;j<b;j++){
                arr[j]=sc.nextInt();
            }
            Main s= new Main();
            System.out.println(s.solve(arr, c));
        }
    }
}
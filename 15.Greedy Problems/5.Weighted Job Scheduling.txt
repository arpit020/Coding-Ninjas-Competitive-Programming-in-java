Weighted Job Scheduling
Send Feedback
You are given N jobs where every job is represented as:
1.Start Time
2.Finish Time
3.Profit Associated
Find the maximum profit subset of jobs such that no two jobs in the subset overlap.
Input
The first line of input contains one integer denoting N.
Next N lines contains three space separated integers denoting the start time, finish time and the profit associated with the ith job. 
Output
Output one integer, the maximum profit that can be achieved.
Constraints
1 = N = 10^6
1 = ai, di, p = 10^6
Sample Input
4
3 10 20
1 2 50
6 19 100
2 100 200
Sample Output
250

Solution:
import java.util.*;
public class Main{
    public static int binarysearch(aa arr[],int index) {
        int start = 0;
        int end = index - 1;
        while (start <= end) {
            int mid = (start + end) / 2;
            if (arr[mid].finish <= arr[index].start) {
                if (arr[mid + 1].finish <= arr[index].start) {
                    start = mid + 1;
                } else {
                    return mid;
                }
            } else {
                end = mid - 1;
            }
        }
        return -1;
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int a=sc.nextInt();
        aa arr[]=new aa[a];
        for (int i=0;i<a;i++){
            arr[i]=new aa(sc.nextInt(),sc.nextInt(),sc.nextInt());
        }
        Arrays.sort(arr,new Sortbyroll());
        int dp[]=new int[a];
        dp[0]=arr[0].profit;
        for (int j=1;j<arr.length;j++){
            int aa=binarysearch(arr,j);
            if(aa!=-1) {
                dp[j] = Math.max(dp[j - 1], arr[j].profit + dp[aa]);
            }else {
                dp[j]=Math.max(dp[j-1],arr[j].profit);
            }
        }
        System.out.print(dp[a-1]);
    }
}
class aa{
    int start;
    int finish;
    int profit;
    aa(int start,int finish,int profit){
        this.start=start;
        this.finish=finish;
        this.profit=profit;
    }
}
class Sortbyroll implements Comparator<aa>
{
    public int compare(aa a, aa b)
    {
        return a.finish -b.finish;
    }
}

Solution2:
import java.util.*;
public class Main{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int a=sc.nextInt();
        aa arr[]=new aa[a];
        for (int i=0;i<a;i++){
            arr[i]=new aa(sc.nextInt(),sc.nextInt(),sc.nextInt());
        }
        Arrays.sort(arr,new Sortbyroll());
        int dp[]=new int[a];
        dp[0]=arr[0].profit;
        for (int j=1;j<arr.length;j++){
            int including=arr[j].profit;
            for(int i=j-1;i>=0;i--){
                if(arr[i].finish<=arr[j].start){
                   including+=dp[i];
                    break;
                }
            }
            dp[j]=Math.max(including,dp[j-1]);
        }
        System.out.print(dp[a-1]);
    }
}
class aa{
    int start;
    int finish;
    int profit;
    aa(int start,int finish,int profit){
        this.start=start;
        this.finish=finish;
        this.profit=profit;
    }
}
class Sortbyroll implements Comparator<aa>
{
    public int compare(aa a, aa b)
    {
        return a.finish -b.finish;
    }
}
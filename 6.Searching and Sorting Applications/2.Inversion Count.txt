Inversion Count
Send Feedback
Let A[0 ... n-1] be an array of n distinct positive integers. If i < j and A[i] > A[j] then the pair (i, j) is called an inversion of A (where i and j are indexes of A). Given an integer array A, your task is to find the number of inversions in A.
Input format :
Line 1 : n, array size
Line 2 : Array elements (separated by space).
Output format :
Count of inversions
Constraints :
1 <= n <= 10^5
1 <= A[i] <= 10^9
Sample Input 1 :
3
3 2 1
Sample Output 1 :
3
Sample Input 2 :
5
2 5 1 3 4
Sample Output 1 :
4

Solution:

public class solution {
	long solve(int[] A,int n){
        long ans=merge_sort(A,0,n-1);
		return ans;
	}
    long merge_sort(int A[],int left,int right){
        long count=0;
        if(right>left){
            int mid=(left+right)/2;
            long countLeft=merge_sort(A,left,mid);
            long countRight=merge_sort(A,mid+1,right);
            long myCount=merge(A,left,mid+1,right);
            return countLeft+countRight+myCount;
        }
        return count;
    }
    long merge(int A[],int left,int mid,int right){
        int i=left,j=mid,k=0;
        int temp[]=new int[right-left+1];
        long count=0;
        while(i<mid && j<=right){
            if(A[i]<=A[j]){
                temp[k++]=A[i++];
            }else{
                temp[k++]=A[j++];
                count+=mid-i;
            }
        }
        while(i<mid){
            temp[k++]=A[i++];
        }
        while(j<=right){
            temp[k++]=A[j++];
        }
        
        for(int x=left,k1=0;x<=right;x++,k1++){
            A[x]=temp[k1];
        }
        return count;
    }
}
